reverse_SD1.0_ME.05 <- read.table("Results_reverse_ME.05_rand.R")
reverse_SD1.0_ME.12 <- read.table("Results_reverse_ME.12_rand.R")
reverse_SD1.0_ME.25 <- read.table("Results_reverse_ME.25_rand.R")
reverse_SD1.0_ME.5 <- read.table("Results_reverse_ME.5_rand.R")
setwd("C:/Users/Barny/Dropbox/KI_Project_4/Results/2nd round/SD0_est_betas")
AGAIG_SD0_ME0 <- read.table("Results_AGAIG_ME0_rand.R")
AGAIG_SD0_ME.25 <- read.table("Results_AGAIG_ME.25_rand.R")
AGAIG_SD0_ME.5 <- read.table("Results_AGAIG_ME.5_rand.R")
AGAIG_SD0_ME.75 <- read.table("Results_AGAIG_ME.75_rand.R")
no_bin_SD0_ME0 <- read.table("Results_no_bin_ME0_rand.R")
no_bin_SD0_ME.25 <- read.table("Results_no_bin_ME.25_rand.R")
no_bin_SD0_ME.5 <- read.table("Results_no_bin_ME.5_rand.R")
no_bin_SD0_ME.75 <- read.table("Results_no_bin_ME.75_rand.R")
no_cont_SD0_ME0 <- read.table("Results_no_cont_ME0_rand.R")
no_cont_SD0_ME.25 <- read.table("Results_no_cont_ME.25_rand.R")
no_cont_SD0_ME.5 <- read.table("Results_no_cont_ME.5_rand.R")
no_cont_SD0_ME.75 <- read.table("Results_no_cont_ME.75_rand.R")
reverse_SD0_ME0 <- read.table("Results_reverse_ME0_rand.R")
reverse_SD0_ME.25 <- read.table("Results_reverse_ME.25_rand.R")
reverse_SD0_ME.5 <- read.table("Results_reverse_ME.5_rand.R")
reverse_SD0_ME.75 <- read.table("Results_reverse_ME.75_rand.R")
###############
setwd("C:/Users/Barny/Dropbox/KI_Project_4/Results/2nd round/SD1.0_set_betas")
AGAIG_SD1.0_ME.05_s <- read.table("Results_AGAIG_ME.05_rand.R")
AGAIG_SD1.0_ME.12_s <- read.table("Results_AGAIG_ME.12_rand.R")
AGAIG_SD1.0_ME.25_s <- read.table("Results_AGAIG_ME.25_rand.R")
AGAIG_SD1.0_ME.5_s <- read.table("Results_AGAIG_ME.5_rand.R")
no_bin_SD1.0_ME.05_s <- read.table("Results_no_bin_ME.05_rand.R")
no_bin_SD1.0_ME.12_s <- read.table("Results_no_bin_ME.12_rand.R")
no_bin_SD1.0_ME.25_s <- read.table("Results_no_bin_ME.25_rand.R")
no_bin_SD1.0_ME.5_s <- read.table("Results_no_bin_ME.5_rand.R")
no_cont_SD1.0_ME.05_s <- read.table("Results_no_cont_ME.05_rand.R")
no_cont_SD1.0_ME.12_s <- read.table("Results_no_cont_ME.12_rand.R")
no_cont_SD1.0_ME.25_s <- read.table("Results_no_cont_ME.25_rand.R")
no_cont_SD1.0_ME.5_s <- read.table("Results_no_cont_ME.5_rand.R")
reverse_SD1.0_ME.05_s <- read.table("Results_reverse_ME.05_rand.R")
reverse_SD1.0_ME.12_s <- read.table("Results_reverse_ME.12_rand.R")
reverse_SD1.0_ME.25_s <- read.table("Results_reverse_ME.25_rand.R")
reverse_SD1.0_ME.5_s <- read.table("Results_reverse_ME.5_rand.R")
##############################
setwd("C:/Users/Barny/Dropbox/KI_Project_4/Results/2nd round/SD0_set_betas")
AGAIG_SD0_ME0_s <- read.table("Results_AGAIG_ME0_rand.R")
AGAIG_SD0_ME.25_s <- read.table("Results_AGAIG_ME.25_rand.R")
AGAIG_SD0_ME.5_s <- read.table("Results_AGAIG_ME.5_rand.R")
AGAIG_SD0_ME.75_s <- read.table("Results_AGAIG_ME.75_rand.R")
no_bin_SD0_ME0_s <- read.table("Results_no_bin_ME0_rand.R")
no_bin_SD0_ME.25_s <- read.table("Results_no_bin_ME.25_rand.R")
no_bin_SD0_ME.5_s <- read.table("Results_no_bin_ME.5_rand.R")
no_bin_SD0_ME.75_s <- read.table("Results_no_bin_ME.75_rand.R")
no_cont_SD0_ME0_s <- read.table("Results_no_cont_ME0_rand.R")
no_cont_SD0_ME.25_s <- read.table("Results_no_cont_ME.25_rand.R")
no_cont_SD0_ME.5_s <- read.table("Results_no_cont_ME.5_rand.R")
no_cont_SD0_ME.75_s <- read.table("Results_no_cont_ME.75_rand.R")
reverse_SD0_ME0_s <- read.table("Results_reverse_ME0_rand.R")
reverse_SD0_ME.25_s <- read.table("Results_reverse_ME.25_rand.R")
reverse_SD0_ME.5_s <- read.table("Results_reverse_ME.5_rand.R")
reverse_SD0_ME.75_s <- read.table("Results_reverse_ME.75_rand.R")
##############################
### reforming the data frame into long format with the method name as a variable
reform <- function(df_name){
temp <- df_name
linreg <- temp[,c(1:6)]
linreg <- linreg %>%
rename(
tsens = linreg_tsens,
esense = linreg_esens,
t = linreg_t,
rds = linreg_rds,
tprevfail = linreg_tprevfail,
eprevfail = linreg_eprevfail
)
linreg$eff <- (100 - linreg$t)/100
linreg$method <- "linreg"
mss <- temp[,c(7:12)]
mss <- mss %>%
rename(
tsens = mss_tsens,
esense = mss_esens,
t = mss_t,
rds = mss_rds,
tprevfail = mss_tprevfail,
eprevfail = mss_eprevfail
)
mss$eff <- (100 - mss$t)/100
mss$method <- "mss"
lrsoe <- temp[,c(13:18)]
lrsoe <- lrsoe %>%
rename(
tsens = lrsoe_tsens,
esense = lrsoe_esens,
t = lrsoe_t,
rds = lrsoe_rds,
tprevfail = lrsoe_tprevfail,
eprevfail = lrsoe_eprevfail
)
lrsoe$eff <- (100 - lrsoe$t)/100
lrsoe$method <- "lrsoe"
mincov <- temp[,c(19:24)]
mincov <- mincov %>%
rename(
tsens = mincov_tsens,
esense = mincov_esens,
t = mincov_t,
rds = mincov_rds,
tprevfail = mincov_tprevfail,
eprevfail = mincov_eprevfail
)
mincov$eff <- (100 - mincov$t)/100
mincov$method <- "mincov"
mini <- temp[,c(25:30)]
mini <- mini %>%
rename(
tsens = mini_tsens,
esense = mini_esens,
t = mini_t,
rds = mini_rds,
tprevfail = mini_tprevfail,
eprevfail = mini_eprevfail
)
mini$eff <- (100 - mini$t)/100
mini$method <- "mini"
temp2 <- rbind(linreg, mss, lrsoe, mincov, mini)
for (i in 1:length(temp2$esense)){
if (is.na(temp2$esense[i])){
temp2$esense[i]=1
}
}
return(temp2)
}
final_table(AGAIG_SD0_ME0, caption="AGAIG, SD=0, ME=0, Estimated betas")
### reforming the data frame into long format with the method name as a variable
reform <- function(df_name){
temp <- df_name
linreg <- temp[,c(1:6)]
linreg <- linreg %>%
rename(
tsens = linreg_tsens,
esense = linreg_esens,
t = linreg_t,
rds = linreg_rds,
tprevfail = linreg_tprevfail,
eprevfail = linreg_eprevfail
)
linreg$eff <- (100 - linreg$t)/100
linreg$method <- "linreg"
mss <- temp[,c(7:12)]
mss <- mss %>%
rename(
tsens = mss_tsens,
esense = mss_esens,
t = mss_t,
rds = mss_rds,
tprevfail = mss_tprevfail,
eprevfail = mss_eprevfail
)
mss$eff <- (100 - mss$t)/100
mss$method <- "mss"
lrsoe <- temp[,c(13:18)]
lrsoe <- lrsoe %>%
rename(
tsens = lrsoe_tsens,
esense = lrsoe_esens,
t = lrsoe_t,
rds = lrsoe_rds,
tprevfail = lrsoe_tprevfail,
eprevfail = lrsoe_eprevfail
)
lrsoe$eff <- (100 - lrsoe$t)/100
lrsoe$method <- "lrsoe"
mincov <- temp[,c(19:24)]
mincov <- mincov %>%
rename(
tsens = mincov_tsens,
esense = mincov_esens,
t = mincov_t,
rds = mincov_rds,
tprevfail = mincov_tprevfail,
eprevfail = mincov_eprevfail
)
mincov$eff <- (100 - mincov$t)/100
mincov$method <- "mincov"
mini <- temp[,c(25:30)]
mini <- mini %>%
rename(
tsens = mini_tsens,
esense = mini_esens,
t = mini_t,
rds = mini_rds,
tprevfail = mini_tprevfail,
eprevfail = mini_eprevfail
)
mini$eff <- (100 - mini$t)/100
mini$method <- "mini"
temp2 <- rbind(linreg, mss, lrsoe, mincov, mini)
for (i in 1:length(temp2$esense)){
if (is.na(temp2$esense[i])){
temp2$esense[i]=1
}
}
return(temp2)
}
binCI <- function(dataset, pool_method, matsize=10, ci_method="clopper-pearson"){
temp <- reform(dataset)
temp <- temp[which(temp$method==pool_method),]
sens <- data.frame(BinomCI(sum(temp$esense*temp$eprevfail, na.rm=TRUE),
sum(temp$eprevfail),
conf.level=0.95,
method=ci_method))
sens.est <- paste0(round(sens$est*100, digits=1), c("%"))
sens.LCL <- paste0(c("("), round(sens$lwr.ci*100, digits=1), c("%"), c(","))
sens.UCL <- paste0(round(sens$upr.ci*100, digits=1), c("%"), c(")"))
sens.summ <- paste(sens.est, sens.LCL, sens.UCL, sep=" ", collapse=NULL)
eff <- data.frame(BinomCI(sum(temp$eff*(matsize^2), na.rm=TRUE),
length(temp$t)*(matsize^2),
conf.level=0.95,
method=ci_method))
eff.est <- paste0(round(eff$est*100, digits=1), c("%"))
eff.LCL <- paste0(c("("), round(eff$lwr.ci*100, digits=1), c("%"), c(","))
eff.UCL <- paste0(round(eff$upr.ci*100, digits=1), c("%"), c(")"))
eff.summ <- paste(eff.est, eff.LCL, eff.UCL, sep=" ", collapse=NULL)
eff.quant <- quantile(temp$eff)
Q1 <- paste0(c("("), round(eff.quant[2]*100, digits=1), c("%"), c(","))
Q3 <- paste0(round(eff.quant[4]*100, digits=1), c("%"), c(")"))
med <- paste0(round(eff.quant[3]*100, digits=1), c("%"))
eff.quant.summ <- paste(med, Q1, Q3, sep=" ", collapse=NULL)
min <- paste0(min(temp$eff)*100, c("%"), c(","))
max <- paste0(max(temp$eff)*100, c("%"))
eff.min <- paste(min, max, sep=" ", collapse=NULL)
rds.mean <- mean(temp$rds)
rds.stdev <- sd(temp$rds)
rds.n = length(temp$rds)
error <- qt(0.975,df=rds.n-1)*rds.stdev/sqrt(rds.n)
UL <- rds.mean+error
LL <- rds.mean-error
rds.summ <- paste0(round(rds.mean, digits=1), c(" ("),
round(LL, digits=1), c(", "), round(UL, digits=1), c(")"))
rds.quant <- quantile(temp$rds)
rds.Q1 <- paste0(c("("),rds.quant[2],c(","))
rds.med <- rds.quant[3]
rds.Q3 <- paste0(rds.quant[4], c(")"))
rds.summ.quant <- paste(rds.med, rds.Q1, rds.Q3, sep=" ", collapse=NULL)
rds.min <- paste(min(temp$rds), max(temp$rds), sep=", ", collapse=NULL)
temp_blank <- matrix(nrow=1,ncol=1)
summ <- data.frame(rbind(temp_blank, sens.summ, temp_blank, eff.summ, eff.quant.summ, eff.min,
temp_blank, rds.summ, rds.summ.quant, rds.min))
if (pool_method=="linreg"){names(summ)[1] <- "Linreg"}
if (pool_method=="mss"){names(summ)[1] <- "MSS"}
if (pool_method=="lrsoe"){names(summ)[1] <- "LRSOE"}
if (pool_method=="mincov"){names(summ)[1] <- "MiniCov"}
if (pool_method=="mini"){names(summ)[1] <- "Mini"}
return(summ)
}
large <- function(x){
paste0('{\\Large ', x, '}')
}
bold <- function(x){
paste0('{\\bfseries ', x, '}')
}
italic <- function(x){
paste0('{\\emph{ ', x, '}}')
}
final_table <- function(dataset, caption, matsize=10, ci_method="clopper-pearson"){
temp <- dataset
linreg <- binCI(dataset=temp, pool_method="linreg")
mss <- binCI(dataset=temp, pool_method="mss")
lrsoe <- binCI(dataset=temp, pool_method="lrsoe")
mincov <- binCI(dataset=temp, pool_method="mincov")
mini <- binCI(dataset=temp, pool_method="mini")
labels <- NULL
labels[1] <- ""
labels[2] <- "Mean (95% CI)"
labels[3] <- ""
labels[4] <- "Mean (95% CI)"
labels[5] <- "Median (Q1, Q3)"
labels[6] <- "Min, Max"
labels[7] <- ""
labels[8] <- "Mean (95% CI)"
labels[9] <- "Median (Q1, Q3)"
labels[10] <- "Min, Max"
label1 <- NULL
label1[1] <- "Sensitivity"
label1[2] <- ""
label1[3] <- "Efficiency"
label1[4] <- ""
label1[5] <- ""
label1[6] <- ""
label1[7] <- "Rounds"
label1[8] <- ""
label1[9] <- ""
label1[10] <- ""
result <- data.frame(cbind(label1, labels, linreg, mss, lrsoe, mincov, mini))
names(result)[1] <- ""
names(result)[2] <- ""
final <- xtable(result, include.rownames=FALSE, caption=caption)
align(final) <- "rrr|c|c|c|c|c"
return(print(final, include.rownames=FALSE, sanitize.colnames.function = bold,
caption.placement="top"))
}
final_table(AGAIG_SD0_ME0, caption="AGAIG, SD=0, ME=0, Estimated betas")
final_table(AGAIG_SD0_ME.25, caption="AGAIG, SD=0, ME=0.25, Estimated betas")
final_table(AGAIG_SD0_ME.5, caption="AGAIG, SD=0, ME=0.5, Estimated betas")
final_table(AGAIG_SD0_ME.75, caption="AGAIG, SD=0, ME=0.75, Estimated betas")
final_table(AGAIG_SD1.0_ME.05, caption="AGAIG, SD=1.0, ME=0.05, Estimated betas")
final_table(AGAIG_SD1.0_ME.12, caption="AGAIG, SD=1.0, ME=0.12, Estimated betas")
final_table(AGAIG_SD1.0_ME.25, caption="AGAIG, SD=1.0, ME=0.25, Estimated betas")
final_table(AGAIG_SD1.0_ME.5, caption="AGAIG, SD=1.0, ME=0.5, Estimated betas")
final_table(AGAIG_SD0_ME0_s, caption="AGAIG, SD=0, ME=0, Identical Betas")
final_table(AGAIG_SD0_ME.25_s, caption="AGAIG, SD=0, ME=0.25, Identical Betas")
final_table(AGAIG_SD0_ME.5_s, caption="AGAIG, SD=0, ME=0.5, Identical Betas")
final_table(AGAIG_SD0_ME.75_s, caption="AGAIG, SD=0, ME=0.75, Identical Betas")
final_table(AGAIG_SD1.0_ME.05_s, caption="AGAIG, SD=1.0, ME=0.05, Identical Betas")
final_table(AGAIG_SD1.0_ME.12_s, caption="AGAIG, SD=1.0, ME=0.12, Identical Betas")
final_table(AGAIG_SD1.0_ME.25_s, caption="AGAIG, SD=1.0, ME=0.25, Identical Betas")
final_table(AGAIG_SD1.0_ME.5_s, caption="AGAIG, SD=1.0, ME=0.5, Identical Betas")
final_table(no_cont_SD0_ME0, caption="No Continuous, SD=0, ME=0, Estimated Betas")
final_table(no_cont_SD0_ME.25, caption="No Continuous, SD=0, ME=0.25, Estimated Betas")
final_table(no_cont_SD0_ME.5, caption="No Continuous, SD=0, ME=0.5, Estimated Betas")
final_table(no_cont_SD0_ME.75, caption="No Continuous, SD=0, ME=0.75, Estimated Betas")
final_table(no_cont_SD1.0_ME.05, caption="No Continuous, SD=1.0, ME=0.05, Estimated Betas")
final_table(no_cont_SD1.0_ME.12, caption="No Continuous, SD=1.0, ME=0.12, Estimated Betas")
final_table(no_cont_SD1.0_ME.25, caption="No Continuous, SD=1.0, ME=0.25, Estimated Betas")
final_table(no_cont_SD1.0_ME.5, caption="No Continuous, SD=1.0, ME=0.5, Estimated Betas")
final_table(no_cont_SD0_ME0_s, caption="No Continuous, SD=0, ME=0, Set Betas")
final_table(no_cont_SD0_ME.25_s, caption="No Continuous, SD=0, ME=0.25, Set Betas")
final_table(no_cont_SD0_ME.5_s, caption="No Continuous, SD=0, ME=0.5, Set Betas")
final_table(no_cont_SD0_ME.75_s, caption="No Continuous, SD=0, ME=0.75, Set Betas")
final_table(no_cont_SD1.0_ME.05_s, caption="No Continuous, SD=1.0, ME=0.05, Set Betas")
final_table(no_cont_SD1.0_ME.12_s, caption="No Continuous, SD=1.0, ME=0.12, Set Betas")
binCI <- function(dataset, pool_method, matsize=10, ci_method="clopper-pearson"){
temp <- reform(dataset)
temp <- temp[which(temp$method==pool_method),]
sens <- data.frame(BinomCI(sum(temp$esense*temp$eprevfail, na.rm=TRUE),
sum(temp$eprevfail),
conf.level=0.95,
method=ci_method))
sens.est <- paste0(round(sens$est*100, digits=1), c("%"))
sens.LCL <- paste0(c("("), round(sens$lwr.ci*100, digits=1), c("%"), c(","))
sens.UCL <- paste0(round(sens$upr.ci*100, digits=1), c("%"), c(")"))
sens.summ <- paste(sens.est, sens.LCL, sens.UCL, sep=" ", collapse=NULL)
eff <- data.frame(BinomCI(sum(temp$eff*(matsize^2), na.rm=TRUE),
length(temp$t)*(matsize^2),
conf.level=0.95,
method=ci_method))
eff.est <- paste0(round(eff$est*100, digits=1), c("%"))
eff.LCL <- paste0(c("("), round(eff$lwr.ci*100, digits=1), c("%"), c(","))
eff.UCL <- paste0(round(eff$upr.ci*100, digits=1), c("%"), c(")"))
eff.summ <- paste(eff.est, eff.LCL, eff.UCL, sep=" ", collapse=NULL)
eff.quant <- quantile(temp$eff)
Q1 <- paste0(c("("), round(eff.quant[2]*100, digits=1), c("%"), c(","))
Q3 <- paste0(round(eff.quant[4]*100, digits=1), c("%"), c(")"))
med <- paste0(round(eff.quant[3]*100, digits=1), c("%"))
eff.quant.summ <- paste(med, Q1, Q3, sep=" ", collapse=NULL)
min <- paste0(min(temp$eff)*100, c("%"), c(","))
max <- paste0(max(temp$eff)*100, c("%"))
eff.min <- paste(min, max, sep=" ", collapse=NULL)
rds.mean <- mean(temp$rds)
rds.stdev <- sd(temp$rds)
rds.n = length(temp$rds)
error <- qt(0.975,df=rds.n-1)*rds.stdev/sqrt(rds.n)
UL <- rds.mean+error
LL <- rds.mean-error
rds.summ <- paste0(round(rds.mean, digits=1), c(" ("),
round(LL, digits=1), c(", "), round(UL, digits=1), c(")"))
rds.quant <- quantile(temp$rds)
rds.Q1 <- paste0(c("("),rds.quant[2],c(","))
rds.med <- rds.quant[3]
rds.Q3 <- paste0(rds.quant[4], c(")"))
rds.summ.quant <- paste(rds.med, rds.Q1, rds.Q3, sep=" ", collapse=NULL)
rds.min <- paste(min(temp$rds), max(temp$rds), sep=", ", collapse=NULL)
temp_blank <- matrix(nrow=1,ncol=1)
summ <- data.frame(rbind(temp_blank, sens.summ, temp_blank, eff.summ, eff.quant.summ, eff.min,
temp_blank, rds.summ, rds.summ.quant, rds.min))
if (pool_method=="linreg"){names(summ)[1] <- "Linreg"}
if (pool_method=="mss"){names(summ)[1] <- "MSS"}
if (pool_method=="lrsoe"){names(summ)[1] <- "LRSOE"}
if (pool_method=="mincov"){names(summ)[1] <- "MiniPred"}
if (pool_method=="mini"){names(summ)[1] <- "Mini+alg"}
return(summ)
}
large <- function(x){
paste0('{\\Large ', x, '}')
}
bold <- function(x){
paste0('{\\bfseries ', x, '}')
}
italic <- function(x){
paste0('{\\emph{ ', x, '}}')
}
final_table(no_cont_SD1.0_ME.12_s, caption="No Continuous, SD=1.0, ME=0.12, Set Betas")
final_table(no_cont_SD1.0_ME.25_s, caption="No Continuous, SD=1.0, ME=0.25, Set Betas")
final_table(no_cont_SD1.0_ME.5_s, caption="No Continuous, SD=1.0, ME=0.5, Set Betas")
final_table(no_bin_SD0_ME0, caption="No Binary, SD=0, ME=0, Estimated Betas")
final_table(no_bin_SD0_ME.25, caption="No Binary, SD=0, ME=0.25, Estimated Betas")
final_table(no_bin_SD0_ME.5, caption="No Binary, SD=0, ME=0.5, Estimated Betas")
final_table(no_bin_SD0_ME.75, caption="No Binary, SD=0, ME=0.75, Estimated Betas")
final_table(no_bin_SD1.0_ME.05, caption="No Binary, SD=1.0, ME=0.05, Estimated Betas")
final_table(no_bin_SD1.0_ME.12, caption="No Binary, SD=1.0, ME=0.12, Estimated Betas")
final_table(no_bin_SD1.0_ME.25, caption="No Binary, SD=1.0, ME=0.25, Estimated Betas")
final_table(no_bin_SD1.0_ME.5, caption="No Binary, SD=1.0, ME=0.5, Estimated Betas")
final_table(no_bin_SD0_ME0_s, caption="No Binary, SD=0, ME=0, Set Betas")
final_table(no_bin_SD0_ME.25_s, caption="No Binary, SD=0, ME=0.25, Set Betas")
final_table(no_bin_SD0_ME.5_s, caption="No Binary, SD=0, ME=0.5, Set Betas")
final_table(no_bin_SD0_ME.75_s, caption="No Binary, SD=0, ME=0.75, Set Betas")
final_table(no_bin_SD1.0_ME.05_s, caption="No Binary, SD=1.0, ME=0.05, Set Betas")
final_table(no_bin_SD1.0_ME.12_s, caption="No Binary, SD=1.0, ME=0.12, Set Betas")
final_table(no_bin_SD1.0_ME.25_s, caption="No Binary, SD=1.0, ME=0.25, Set Betas")
final_table(no_bin_SD1.0_ME.5_s, caption="No Binary, SD=1.0, ME=0.5, Set Betas")
final_table(reverse_SD0_ME0, caption="Reverse, SD=0, ME=0, Estimated Betas")
final_table(reverse_SD0_ME.25, caption="Reverse, SD=0, ME=0.25, Estimated Betas")
final_table(reverse_SD0_ME.5, caption="Reverse, SD=0, ME=0.5, Estimated Betas")
final_table(reverse_SD0_ME.75, caption="Reverse, SD=0, ME=0.75, Estimated Betas")
final_table(reverse_SD1.0_ME.05, caption="Reverse, SD=1.0, ME=0.05, Estimated Betas")
final_table(reverse_SD1.0_ME.12, caption="Reverse, SD=1.0, ME=0.12, Estimated Betas")
final_table(reverse_SD1.0_ME.25, caption="Reverse, SD=1.0, ME=0.25, Estimated Betas")
final_table(reverse_SD1.0_ME.5, caption="Reverse, SD=1.0, ME=0.5, Estimated Betas")
final_table(reverse_SD0_ME0_s, caption="Reverse, SD=0, ME=0, Set Betas")
final_table(reverse_SD0_ME.25_s, caption="Reverse, SD=0, ME=0.25, Set Betas")
final_table(reverse_SD0_ME.5_s, caption="Reverse, SD=0, ME=0.5, Set Betas")
final_table(reverse_SD0_ME.75_s, caption="Reverse, SD=0, ME=0.75, Set Betas")
final_table(reverse_SD1.0_ME.05_s, caption="Reverse, SD=1.0, ME=0.05, Set Betas")
final_table(reverse_SD1.0_ME.12_s, caption="Reverse, SD=1.0, ME=0.12, Set Betas")
final_table(reverse_SD1.0_ME.25_s, caption="Reverse, SD=1.0, ME=0.25, Set Betas")
final_table(reverse_SD1.0_ME.5_s, caption="Reverse, SD=1.0, ME=0.5, Set Betas")
#### evaluting the methods; sourcing the functions I need through method_eval_source
############ This is a rerun of method_eval1, using the corner matrix fill for the linreg and LRSOE methods
library(tidyverse)
library(dplyr)
setwd("C:/Users/Barny/Documents/GitHub/Pooled_Testing_HIV/Programs")
source("method_eval_source.R")
setwd("C:/Users/Barny/Documents/GitHub/Pooled_Testing_HIV/SimData/Records_used_in_500_matrices_hypred")
##############################################################################################
# METHOD_EVAL1
##### AGAIG scenarios using SD=1.0 and set betas
data <- read.table("SD1.0_data_500_run2.R")
data <- predictVL(data, b0star=0.4414945, b1star=0.1170119, b2star=1.9283680, b3star=0.1369999)
set.seed(18)
result1 <- hypred(reps=500, data=data, matsize=10, prec=10, precrd=20,
cutoff=1000, SE=.05, tstperd=5, lowlimit=50, filltyp="rnd", top_percent=0.1, bot_percent=0.6)
write.table(result1, file="C:/Users/Barny/Dropbox/KI_Project_4/Results/2nd round/HyPred_SD1.0/Results_Hypred_AGAIG_ME.05_rand.R")
set.seed(18)
result1 <- hypred(reps=500, data=data, matsize=10, prec=10, precrd=20,
cutoff=1000, SE=.12, tstperd=5, lowlimit=50, filltyp="rnd", top_percent=0.1, bot_percent=0.6)
write.table(result1, file="C:/Users/Barny/Dropbox/KI_Project_4/Results/2nd round/HyPred_SD1.0/Results_Hypred_AGAIG_ME.12_rand.R")
set.seed(18)
result1 <- hypred(reps=500, data=data, matsize=10, prec=10, precrd=20,
cutoff=1000, SE=.25, tstperd=5, lowlimit=50, filltyp="rnd", top_percent=0.1, bot_percent=0.6)
write.table(result1, file="C:/Users/Barny/Dropbox/KI_Project_4/Results/2nd round/HyPred_SD1.0/Results_Hypred_AGAIG_ME.25_rand.R")
set.seed(18)
result1 <- hypred(reps=500, data=data, matsize=10, prec=10, precrd=20,
cutoff=1000, SE=.5, tstperd=5, lowlimit=50, filltyp="rnd", top_percent=0.1, bot_percent=0.6)
write.table(result1, file="C:/Users/Barny/Dropbox/KI_Project_4/Results/2nd round/HyPred_SD1.0/Results_Hypred_AGAIG_ME.5_rand.R")
##################################################################################################################################
data <- read.table("SD0_data_500_run2.R")
data <- predictVL(data, b0star=0.4414945, b1star=0.1170119, b2star=1.9283680, b3star=0.1369999)
debug(hypred)
set.seed(18)
result1 <- hypred(reps=500, data=data, matsize=10, prec=10, precrd=20,
cutoff=1000, SE=0, tstperd=5, lowlimit=50, filltyp="rnd", top_percent=0.1, bot_percent=0.6)
write.table(result1, file="C:/Users/Barny/Dropbox/KI_Project_4/Results/2nd round/HyPred_SD0/Results_Hypred_AGAIG_ME0_rand.R")
set.seed(18)
result1 <- hypred(reps=500, data=data, matsize=10, prec=10, precrd=20,
cutoff=1000, SE=.25, tstperd=5, lowlimit=50, filltyp="rnd", top_percent=0.1, bot_percent=0.6)
write.table(result1, file="C:/Users/Barny/Dropbox/KI_Project_4/Results/2nd round/HyPred_SD0/Results_Hypred_AGAIG_ME.25_rand.R")
set.seed(18)
result1 <- hypred(reps=500, data=data, matsize=10, prec=10, precrd=20,
cutoff=1000, SE=.5, tstperd=5, lowlimit=50, filltyp="rnd", top_percent=0.1, bot_percent=0.6)
write.table(result1, file="C:/Users/Barny/Dropbox/KI_Project_4/Results/2nd round/HyPred_SD0/Results_Hypred_AGAIG_ME.5_rand.R")
set.seed(18)
result1 <- hypred(reps=500, data=data, matsize=10, prec=10, precrd=20,
cutoff=1000, SE=.75, tstperd=5, lowlimit=50, filltyp="rnd", top_percent=0.1, bot_percent=0.6)
write.table(result1, file="C:/Users/Barny/Dropbox/KI_Project_4/Results/2nd round/HyPred_SD0/Results_Hypred_AGAIG_ME.75_rand.R")
######################################################################################################################################
##### AGAIG scenarios using SD=1.0 and set betas
data <- read.table("SD1.0_data_500_run2.R")
data <- predictVL(data, b0star=5.8155002, b1star=-0.2442230, b2star=-3.7203965, b3star=0.1260099)
debug(hypred)
set.seed(18)
result1 <- hypred(reps=500, data=data, matsize=10, prec=10, precrd=20,
cutoff=1000, SE=.05, tstperd=5, lowlimit=50, filltyp="rnd", top_percent=0.1, bot_percent=0.6)
write.table(result1, file="C:/Users/Barny/Dropbox/KI_Project_4/Results/2nd round/HyPred_SD1.0/Results_Hypred_reverse_ME.05_rand.R")
set.seed(18)
result1 <- hypred(reps=500, data=data, matsize=10, prec=10, precrd=20,
cutoff=1000, SE=.12, tstperd=5, lowlimit=50, filltyp="rnd", top_percent=0.1, bot_percent=0.6)
write.table(result1, file="C:/Users/Barny/Dropbox/KI_Project_4/Results/2nd round/HyPred_SD1.0/Results_Hypred_reverse_ME.12_rand.R")
set.seed(18)
result1 <- hypred(reps=500, data=data, matsize=10, prec=10, precrd=20,
cutoff=1000, SE=.25, tstperd=5, lowlimit=50, filltyp="rnd", top_percent=0.1, bot_percent=0.6)
write.table(result1, file="C:/Users/Barny/Dropbox/KI_Project_4/Results/2nd round/HyPred_SD1.0/Results_Hypred_reverse_ME.25_rand.R")
set.seed(18)
result1 <- hypred(reps=500, data=data, matsize=10, prec=10, precrd=20,
cutoff=1000, SE=.5, tstperd=5, lowlimit=50, filltyp="rnd", top_percent=0.1, bot_percent=0.6)
write.table(result1, file="C:/Users/Barny/Dropbox/KI_Project_4/Results/2nd round/HyPred_SD1.0/Results_Hypred_reverse_ME.5_rand.R")
##################################################################################################################################
data <- read.table("SD0_data_500_run2.R")
data <- predictVL(data, b0star=5.8155002, b1star=-0.2442230, b2star=-3.7203965, b3star=0.1260099)
set.seed(18)
result1 <- hypred(reps=500, data=data, matsize=10, prec=10, precrd=20,
cutoff=1000, SE=0, tstperd=5, lowlimit=50, filltyp="rnd", top_percent=0.1, bot_percent=0.6)
write.table(result1, file="C:/Users/Barny/Dropbox/KI_Project_4/Results/2nd round/HyPred_SD0/Results_Hypred_reverse_ME0_rand.R")
set.seed(18)
result1 <- hypred(reps=500, data=data, matsize=10, prec=10, precrd=20,
cutoff=1000, SE=.25, tstperd=5, lowlimit=50, filltyp="rnd", top_percent=0.1, bot_percent=0.6)
write.table(result1, file="C:/Users/Barny/Dropbox/KI_Project_4/Results/2nd round/HyPred_SD0/Results_Hypred_reverse_ME.25_rand.R")
set.seed(18)
result1 <- hypred(reps=500, data=data, matsize=10, prec=10, precrd=20,
cutoff=1000, SE=.5, tstperd=5, lowlimit=50, filltyp="rnd", top_percent=0.1, bot_percent=0.6)
write.table(result1, file="C:/Users/Barny/Dropbox/KI_Project_4/Results/2nd round/HyPred_SD0/Results_Hypred_reverse_ME.5_rand.R")
set.seed(18)
result1 <- hypred(reps=500, data=data, matsize=10, prec=10, precrd=20,
cutoff=1000, SE=.75, tstperd=5, lowlimit=50, filltyp="rnd", top_percent=0.1, bot_percent=0.6)
write.table(result1, file="C:/Users/Barny/Dropbox/KI_Project_4/Results/2nd round/HyPred_SD0/Results_Hypred_reverse_ME.75_rand.R")
######################################################################################################################################
