t3 <- t^3
data$logvl <- log(data$vl, base=10)
View(data)
plot(data$logvl~data$time)
glm(data$logvl~data$time)
fit <- glm(data$logvl~data$time)
summary(fit)
prev.est.naive <- c(.01,.03,.05,.07,,08,.11,.11,.14,.17,.19,.20, .22)
prev.est.naive <- c(.01,.03,.05,.07,08,.11,.11,.14,.17,.19,.20, .22)
data.naive <- matrix(nrow=0, ncol=2)
for(i in 1:length(prev.est.naive)){
vl <- createpop(1000, prev.est.naive[i], 1000, prevfail=TRUE)
time <- rep(t[i], times=1000)
data1 <- cbind(vl, time)
data.naive <- rbind(data.naive, data1)
}
prev.est.naive <- c(.01,.03,.05,.07,.08,.11,.11,.14,.17,.19,.20, .22)
data.naive <- matrix(nrow=0, ncol=2)
for(i in 1:length(prev.est.naive)){
vl <- createpop(1000, prev.est.naive[i], 1000, prevfail=TRUE)
time <- rep(t[i], times=1000)
data1 <- cbind(vl, time)
data.naive <- rbind(data.naive, data1)
}
View(data.naive)
check <- data.naive[1:1000,]
high <- check$vl
length(high[high>1000])
check <- data.naive[1:1000,]
high <- check
length(high[high>1000])
data.naive <- data.frame(data.naive)
View(data.naive)
data.naive$logvl <- log(data.naive$vl, base=10)
View(data.naive)
fit.naive <- glm(data.naive$logvl~data.naive$time)
summary(fit.naive)
prev.est.naive <- c(.01,.02,.05,.07,.08,.11,.11,.14,.17,.19,.20, .22)
data.naive <- matrix(nrow=0, ncol=2)
for(i in 1:length(prev.est.naive)){
vl <- createpop(1000, prev.est.naive[i], 1000, prevfail=TRUE)
time <- rep(t[i], times=1000)
data1 <- cbind(vl, time)
data.naive <- rbind(data.naive, data1)
}
data.naive <- data.frame(data.naive)
data.naive$logvl <- log(data.naive$vl, base=10)
check <- data.naive[1:1000,]
high <- check
length(high[high>1000])
fit.naive <- glm(data.naive$logvl~data.naive$time)
summary(fit.naive)
data$logtime <- log(time, base=2)
View(data)
log(1)
log(1, base=2)
data$logtime <- log(data$time, base=2)
View(data)
fit <- glm(data$logvl~data$logtime)
summary(fit)
plot(fit)
plot(predict(fit))
summary(fit)
logvl <- seq(1, 6, by=.01)
log(19, base=2)
logtime <- seq(0, 4.3, by=.1)
logtime <- seq(0, 4.3, by=.1)
logvl <- NULL
for(i in 1:length(logvl)){
logvl[i] <- 1.21 + .3344*logtime
}
logtime <- seq(0, 4.3, by=.1)
logvl <- NULL
for(i in 1:length(logvl)){
logvl[i] <- 1.21 + .3344*logtime[i]
}
plot(logvl~logtime)
logvl <- NULL
for(i in 1:length(logtime)){
logvl[i] <- 1.21 + .3344*logtime[i]
}
plot(logvl~logtime)
time <- 2^logtime
plot(logvl~time)
t <- c(1,2,3,4,5,6,7,8,9,10,11,12,19)
t2 <- t^2
t3 <- t^3
prev <- c(.01, .03, .07,.12,.18,.24,.27,.30,.32,.35,.37,.38,.50)
prev.est <- data.frame(cbind(t, prev))
data <- matrix(nrow=0, ncol=2)
for(i in 1:length(t)){
vl <- createpop(1000, prev[i], 1000, prevfail=TRUE)
time <- rep(t[i], times=1000)
data1 <- cbind(vl, time)
data <- rbind(data, data1)
}
data <- data.frame(data)
data$logtime <- log(data$time, base=2)
data$logvl <- log(data$vl, base=10)
check <- data[1:1000,]
high <- check$vl
length(high[high>1000])
plot(data$logvl~data$time)
fit <- glm(data$logvl~data$logtime)
summary(fit)
logtime <- seq(0, 7, by=.1)
logvl <- NULL
for(i in 1:length(logtime)){
logvl[i] <- 1.21 + .337*logtime[i]
}
time <- 2^logtime
plot(logvl~time)
data <- data.frame(data)
data$logtime <- log(data$time, base=1.5)
data$logvl <- log(data$vl, base=10)
check <- data[1:1000,]
high <- check$vl
length(high[high>1000])
plot(data$logvl~data$time)
fit <- glm(data$logvl~data$logtime)
summary(fit)
logtime <- seq(0, 7, by=.1)
logvl <- NULL
for(i in 1:length(logtime)){
logvl[i] <- 1.21 + .197*logtime[i]
}
time <- 1.5^logtime
plot(logvl~time)
data <- data.frame(data)
data$logtime <- log(data$time)
data$logvl <- log(data$vl, base=10)
check <- data[1:1000,]
high <- check$vl
length(high[high>1000])
plot(data$logvl~data$time)
fit <- glm(data$logvl~data$logtime)
summary(fit)
logtime <- seq(0, 7, by=.1)
logvl <- NULL
for(i in 1:length(logtime)){
logvl[i] <- 1.21 + .4863*logtime[i]
}
time <- exp(logtime)
plot(logvl~time)
plot(logvl~time, xlim=(0, 100))
logtime <- seq(0, 4.3, by=.1)
logvl <- NULL
for(i in 1:length(logtime)){
logvl[i] <- 1.21 + .4863*logtime[i]
}
time <- exp(logtime)
plot(logvl~time)
fit <- glm(data$logvl~data$logtime)
summary(fit)
logtime <- seq(0, 4.3, by=.1)
logvl <- NULL
for(i in 1:length(logtime)){
logvl[i] <- 1.21 + .4863*logtime[i]
}
time <- exp(logtime)
plot(logvl~time)
plot(logvl~time, main="Log10(VL) vs. Log(Time in Months from Suppression",
xlab="Time in Months", ylab="Log10(VL")
plot(logvl~time, main="Log10(VL) vs. Log2(Time in Months from Suppression)
Combined Population",
xlab="Time in Months", ylab="Log10(VL")
data$logtime <- log(data$time, base=2)
data$logvl <- log(data$vl, base=10)
check <- data[1:1000,]
high <- check$vl
length(high[high>1000])
plot(data$logvl~data$time)
fit <- glm(data$logvl~data$logtime)
summary(fit)
plot(logvl~time, main="Log10(VL) vs. Log2(Time in Months from Suppression)
Combined Population",
xlab="Time in Months", ylab="Log10(VL)")
prev.est.naive <- c(.01,.02,.05,.07,.08,.11,.11,.14,.17,.19,.20, .22)
data.naive <- matrix(nrow=0, ncol=2)
for(i in 1:length(prev.est.naive)){
vl <- createpop(1000, prev.est.naive[i], 1000, prevfail=TRUE)
time <- rep(t[i], times=1000)
data1 <- cbind(vl, time)
data.naive <- rbind(data.naive, data1)
}
data.naive <- data.frame(data.naive)
data.naive$logtime <- log(data.naive$time, base=2)
data.naive$logvl <- log(data.naive$vl, base=10)
check <- data.naive[1:1000,]
high <- check
length(high[high>1000])
fit.naive <- glm(data.naive$logvl~data.naive$logtime)
summary(fit.naive)
fit <- glm(data$logvl~data$logtime)
summary(fit)
logtime <- seq(0, 4.3, by=.1)
logvl <- NULL
for(i in 1:length(logtime)){
logvl[i] <- 1.2063 + .3370*logtime[i]
}
time <- 2^logtime
plot(logvl~time, main="Log10(VL) vs. Log2(Time in Months from Suppression)
Combined Population",
xlab="Time in Months", ylab="Log10(VL)")
2^4.3
log(100, base=2)
logtime <- seq(0, 7, by=.1)
logvl <- NULL
for(i in 1:length(logtime)){
logvl[i] <- 1.2063 + .3370*logtime[i]
}
time <- 2^logtime
plot(logvl~time, main="Log10(VL) vs. Log2(Time in Months from Suppression)
Combined Population",
xlab="Time in Months", ylab="Log10(VL)")
10^3.5
data$sqrtime <- data$time^(1/2)
fit2 <- glm(data$logvl~data$sqrtime)
summary(fit2)
sqrtime <- seq(0, 10, by=.1)
logvl <- NULL
for(i in 1:length(sqrtime)){
logvl[i] <- 0.9343 + .4370*sqrtime[i]
}
time <- sqrtime^2
plot(logvl~time, main="Log10(VL) vs. Square Root Time in Months from Suppression)
Combined Population",
xlab="Time in Months", ylab="Log10(VL)")
plot(logvl~time, main="Log10(VL) vs. Log2(Time in Months from Suppression)
Combined Population",
xlab="Time in Months", ylab="Log10(VL)")
time <- 2^logtime
plot(logvl~time, main="Log10(VL) vs. Log2(Time in Months from Suppression)
Combined Population",
xlab="Time in Months", ylab="Log10(VL)")
logtime <- seq(0, 7, by=.1)
logvl <- NULL
for(i in 1:length(logtime)){
logvl[i] <- 1.2063 + .3370*logtime[i]
}
time <- 2^logtime
plot(logvl~time, main="Log10(VL) vs. Log2(Time in Months from Suppression)
Combined Population",
xlab="Time in Months", ylab="Log10(VL)")
data.naive <- data.frame(data.naive)
data.naive$logtime <- log(data.naive$time, base=2)
data.anive$sqrtime <- data.naive$time^(1/2)
data.naive$logvl <- log(data.naive$vl, base=10)
check <- data.naive[1:1000,]
high <- check
length(high[high>1000])
fit.naive <- glm(data.naive$logvl~data.naive$sqrtime)
summary(fit.naive)
logtime <- seq(0, 4.3, by=.1)
logvl <- NULL
for(i in 1:length(logtime)){
logvl[i] <- 1.3241 + .1654*sqrtime[i]
}
time <- sqrtime^2
plot(logvl~time, main="Log10(VL) vs. Sqrt(Time in Months)
Naive Population",
xlab="Time in Months", ylab="Log10(VL)")
sqrtime <- seq(0, 10, by=.1)
logvl <- NULL
for(i in 1:length(logtime)){
logvl[i] <- 1.3241 + .1654*sqrtime[i]
}
time <- sqrtime^2
plot(logvl~time, main="Log10(VL) vs. Sqrt(Time in Months)
Naive Population",
xlab="Time in Months", ylab="Log10(VL)")
sqrtime <- seq(0, 10, by=.1)
logvl <- NULL
for(i in 1:length(sqrtime)){
logvl[i] <- 1.3241 + .1654*sqrtime[i]
}
time <- sqrtime^2
plot(logvl~time, main="Log10(VL) vs. Sqrt(Time in Months)
Naive Population",
xlab="Time in Months", ylab="Log10(VL)")
10^0.5
prev.est.exp <- c(.01,.03,.08,.15,.20,.26,.30,.34,.36,.39,.40,.42)
prev.est.exp <- c(.01,.03,.08,.15,.20,.26,.30,.34,.36,.39,.40,.42)
?glm()
install.packages("knitr")
install.packages("rmarkdown")
install.packages("rmarkdown")
library("rmarkdown", lib.loc="~/R/win-library/3.1")
library("knitr", lib.loc="~/R/win-library/3.1")
updateR()
updateR()
if(!require(installr)) {
install.packages("installr");
require(installr)
} #load / install+load installr
updateR()
install.packages("sbrl")
shiny::runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
shiny::runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
vector()
?vector
shiny::runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
library(shiny)
library(rhandsontable)
ui <- fluidPage(
titlePanel("Ttile"),
sidebarLayout(
sidebarPanel(
actionButton("runButton","Change Dataframes")
),
mainPanel(
tabsetPanel(
tabPanel("OldIrisTab", rHandsontableOutput('OldIris')),
tabPanel("NewIrisTab", DT::dataTableOutput("NewIris"))
))))
server <- function(input,output,session)({
values <- reactiveValues()
output$OldIris <- renderRHandsontable({
rhandsontable(iris)
})
observeEvent(input$runButton, {
values$data <-  hot_to_r(input$OldIris)
})
output$NewIris <- DT::renderDataTable({
values$data
})
})
shinyApp(ui, server)
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
packages <- c("shiny","data.table","devtools","shinysky","googleVis","scales","reshape2")
lapply(packages,require,character.only = TRUE)
disableActionButton <- function(id,session) {
session$sendCustomMessage(type = "jsCode1",
list(code = paste("$('#",id,"').prop('disabled',true)"
,sep = "")))
}
enableActionButton <- function(id,session) {
session$sendCustomMessage(type = "jsCode2",
list(code = paste("$('#",id,"').prop('disabled',false)"
,sep = "")))
}
shiny::shinyServer(function(input,output,session)({
values <- reactiveValues(data = as.data.frame(runif(2)),readonly=FALSE)
observe({
input$recalc
values$data <- as.data.frame(runif(2))
})
observe({
if (!is.null(input$table))
values$data <- hot_to_r(input$table)
})
output$table <- renderRHandsontable({
rhandsontable(values$data,readOnly=values$readonly)
})
observeEvent(input$edit, {
values$readonly <- FALSE
})
observeEvent(input$freeze,{
values$readonly <- TRUE
})
output$restitle <- renderText({
"Sum Output"
})
output$result <- renderText({
sum(values$data)
})
})
)
packages <- c("shiny","data.table","devtools","shinysky","googleVis","scales","reshape2")
lapply(packages,require,character.only = TRUE)
disableActionButton <- function(id,session) {
session$sendCustomMessage(type = "jsCode1",
list(code = paste("$('#",id,"').prop('disabled',true)"
,sep = "")))
}
enableActionButton <- function(id,session) {
session$sendCustomMessage(type = "jsCode2",
list(code = paste("$('#",id,"').prop('disabled',false)"
,sep = "")))
}
shiny::shinyServer(function(input,output,session)({
values <- reactiveValues(data = as.data.frame(runif(2)),readonly=FALSE)
observe({
input$recalc
values$data <- as.data.frame(runif(2))
})
observe({
if (!is.null(input$table))
values$data <- hot_to_r(input$table)
})
output$table <- renderRHandsontable({
rhandsontable(values$data,readOnly=values$readonly)
})
observeEvent(input$edit, {
values$readonly <- FALSE
})
observeEvent(input$freeze,{
values$readonly <- TRUE
})
output$restitle <- renderText({
"Sum Output"
})
output$result <- renderText({
sum(values$data)
})
})
)
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
shiny::runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
shiny::runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
shiny::runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
shiny::runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
?grepl()
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
shiny::runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
View(shinyInput)
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
shiny::runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
shiny::runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
shiny::runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
runApp('C:/Users/Barny/Dropbox/KI_Project_4/Programs/shiny_pooled_testing')
library(tidyverse)
library(dplyr)
setwd("C:/Users/Barny/Documents/GitHub/Pooled_Testing_HIV/Programs")
source("method_eval_source.R")
setwd("C:/Users/Barny/Documents/GitHub/Pooled_Testing_HIV/SimData")
data <- read.table("Uganda_SimData_SD0.R")
data <- predictVL(data, b0star=0.5, b1star=0.2, b2star=0, b3star= 0)
set.seed(18)
result1 <- pool.alg.cov(reps=500, data=data, matsize=10, prec=10, precrd=20,
cutoff=1000, SE=.75, tstperd=5, lowlimit=50, filltyp="rnd")
write.table(result1, file="C:/Users/Barny/Dropbox/KI_Project_4/Results/2nd round/SD0_set_betas/Results_no_bin_ME.75_rand.R")
##### reverse scenarios using SD=0 and set betas
data <- read.table("Uganda_SimData_SD0.R")
data <- predictVL(data, b0star=6, b1star=-0.1, b2star=-2, b3star=-0.1)
set.seed(18)
result1 <- pool.alg.cov(reps=500, data=data, matsize=10, prec=10, precrd=20,
cutoff=1000, SE=0, tstperd=5, lowlimit=50, filltyp="rnd")
write.table(result1, file="C:/Users/Barny/Dropbox/KI_Project_4/Results/2nd round/SD0_set_betas/Results_reverse_ME0_rand.R")
set.seed(18)
result1 <- pool.alg.cov(reps=500, data=data, matsize=10, prec=10, precrd=20,
cutoff=1000, SE=.25, tstperd=5, lowlimit=50, filltyp="rnd")
write.table(result1, file="C:/Users/Barny/Dropbox/KI_Project_4/Results/2nd round/SD0_set_betas/Results_reverse_ME.25_rand.R")
set.seed(18)
result1 <- pool.alg.cov(reps=500, data=data, matsize=10, prec=10, precrd=20,
cutoff=1000, SE=.5, tstperd=5, lowlimit=50, filltyp="rnd")
write.table(result1, file="C:/Users/Barny/Dropbox/KI_Project_4/Results/2nd round/SD0_set_betas/Results_reverse_ME.5_rand.R")
set.seed(18)
result1 <- pool.alg.cov(reps=500, data=data, matsize=10, prec=10, precrd=20,
cutoff=1000, SE=.75, tstperd=5, lowlimit=50, filltyp="rnd")
write.table(result1, file="C:/Users/Barny/Dropbox/KI_Project_4/Results/2nd round/SD0_set_betas/Results_reverse_ME.75_rand.R")
