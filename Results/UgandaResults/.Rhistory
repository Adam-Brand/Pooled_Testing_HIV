test_final <- test_final %>%
rename(
VL = vl,
log.VL = vllog,
predVL=X1
)
#### adding variable for predicted classification based on the prediction and cutoffs from the training set
for (i in 1:length(test_final$study_id)){
if (test_final$predVL[i] > cutoffs[2]){test_final$pred_cat[i]="high"}
if (test_final$predVL[i] <= cutoffs[2] & test_final$predVL[i] > cutoffs[1]){test_final$pred_cat[i]="mid"}
if (test_final$predVL[i] <= cutoffs[1]){test_final$pred_cat[i]="low"}
}
for (i in 1:length(test_final$study_id)){
if (test_final$VL[i] <= 50){test_final$VL[i]=50}
}
##### putting predVZL back on the actual scale
for (i in 1:length(test_final$study_id)){
test_final$predVL[i] <- 10^test_final$predVL[i]
}
#### above we used the cutoffs at 90% and 60% from the predicted VLs from the training set to get cutoff log VL
#### values to classify subjects for the hypred method. We were shooting for 10%, 30%, 60%
#### using the cutoffs from the training set, we wind up with 5%, 45%, 50%
getwd()
write.table(test_final, "test_set_final.R")
## Evaluating the pooled testing methods using the real Uganda data
## evaluating the Hypred method with the first statements and the other methods below.
## As the real data are the observed values, no SD is added.
## However, we do add ME to the pools as we do not have observed pool averages
library(tidyverse)
library(dplyr)
# set working directory of location of source program
setwd("C:/Users/Barny/Documents/GitHub/Pooled_Testing_HIV/Programs")
source("method_eval_source.R")
# set working directory to location to store the data
setwd("C:/Users/Barny/Documents/KI_project_4/data_uganda/Clean_data")
##############################################################################################
##### Evaluation using the real Uganda data. The first set of statements evaluates the Hypred method
##### which uses individual testing for the top risk tier, and MiniPred for the middle and bottom tiers
##### the below dataset does not exist inthe repository as we did not include the real data
data <- read.table("test_set_final.R")
set.seed(1212)
## there are 3607 records in the test set, we choose 3600 to have a number divisible by 100
select <- sample.int(n=length(data$VL), size=3300, replace=FALSE)
data <- data[c(select),]
set.seed(18)
result1 <- hypred_uganda(reps=33, data=data, matsize=10, prec=10, precrd=20,
cutoff=1000, SE=0, tstperd=5, lowlimit=50, filltyp="rnd", Uganda=TRUE)
write.table(result1, file="C:/Users/Barny/Documents/GitHub/Pooled_Testing_HIV/Results/UgandaResults/round2/Uganda_hypred_ME0.R")
set.seed(18)
result1 <- hypred_uganda(reps=33, data=data, matsize=10, prec=10, precrd=20,
cutoff=1000, SE=0.05, tstperd=5, lowlimit=50, filltyp="rnd", Uganda=TRUE)
write.table(result1, file="C:/Users/Barny/Documents/GitHub/Pooled_Testing_HIV/Results/UgandaResults/round2/Uganda_hypred_ME.05.R")
set.seed(18)
result1 <- hypred_uganda(reps=33, data=data, matsize=10, prec=10, precrd=20,
cutoff=1000, SE=.12, tstperd=5, lowlimit=50, filltyp="rnd", Uganda=TRUE)
write.table(result1, file="C:/Users/Barny/Documents/GitHub/Pooled_Testing_HIV/Results/UgandaResults/round2/Uganda_hypred_ME.12.R")
set.seed(18)
result1 <- hypred_uganda(reps=33, data=data, matsize=10, prec=10, precrd=20,
cutoff=1000, SE=.25, tstperd=5, lowlimit=50, filltyp="rnd", Uganda=TRUE)
write.table(result1, file="C:/Users/Barny/Documents/GitHub/Pooled_Testing_HIV/Results/UgandaResults/round2/Uganda_hypred_ME.25.R")
set.seed(18)
result1 <- hypred_uganda(reps=33, data=data, matsize=10, prec=10, precrd=20,
cutoff=1000, SE=.5, tstperd=5, lowlimit=50, filltyp="rnd", Uganda=TRUE)
write.table(result1, file="C:/Users/Barny/Documents/GitHub/Pooled_Testing_HIV/Results/UgandaResults/round2/Uganda_hypred_ME.5.R")
set.seed(18)
result1 <- hypred_uganda(reps=33, data=data, matsize=10, prec=10, precrd=20,
cutoff=1000, SE=.75, tstperd=5, lowlimit=50, filltyp="rnd", Uganda=TRUE)
write.table(result1, file="C:/Users/Barny/Documents/GitHub/Pooled_Testing_HIV/Results/UgandaResults/round2/Uganda_hypred_ME.75.R")
######################################################################################################
#### the below statements evaluate methods other than HyPred using the Uganda data
set.seed(18)
result1 <- pool.alg.cov(reps=33, data=data, matsize=10, prec=10, precrd=20,
cutoff=1000, SE=0, tstperd=5, lowlimit=50, filltyp="rnd", Uganda=TRUE)
write.table(result1, file="C:/Users/Barny/Documents/GitHub/Pooled_Testing_HIV/Results/UgandaResults/round2/Uganda_ME0.R")
set.seed(18)
result1 <- pool.alg.cov(reps=33, data=data, matsize=10, prec=10, precrd=20,
cutoff=1000, SE=.05, tstperd=5, lowlimit=50, filltyp="rnd", Uganda=TRUE)
write.table(result1, file="C:/Users/Barny/Documents/GitHub/Pooled_Testing_HIV/Results/UgandaResults/round2/Uganda_ME.05.R")
set.seed(18)
result1 <- pool.alg.cov(reps=33, data=data, matsize=10, prec=10, precrd=20,
cutoff=1000, SE=.12, tstperd=5, lowlimit=50, filltyp="rnd", Uganda=TRUE)
write.table(result1, file="C:/Users/Barny/Documents/GitHub/Pooled_Testing_HIV/Results/UgandaResults/round2/Uganda_ME.12.R")
set.seed(18)
result1 <- pool.alg.cov(reps=33, data=data, matsize=10, prec=10, precrd=20,
cutoff=1000, SE=.25, tstperd=5, lowlimit=50, filltyp="rnd", Uganda=TRUE)
write.table(result1, file="C:/Users/Barny/Documents/GitHub/Pooled_Testing_HIV/Results/UgandaResults/round2/Uganda_ME.25.R")
set.seed(18)
result1 <- pool.alg.cov(reps=33, data=data, matsize=10, prec=10, precrd=20,
cutoff=1000, SE=.5, tstperd=5, lowlimit=50, filltyp="rnd", Uganda=TRUE)
write.table(result1, file="C:/Users/Barny/Documents/GitHub/Pooled_Testing_HIV/Results/UgandaResults/round2/Uganda_ME.5.R")
set.seed(18)
result1 <- pool.alg.cov(reps=33, data=data, matsize=10, prec=10, precrd=20,
cutoff=1000, SE=.75, tstperd=5, lowlimit=50, filltyp="rnd", Uganda=TRUE)
write.table(result1, file="C:/Users/Barny/Documents/GitHub/Pooled_Testing_HIV/Results/UgandaResults/round2/Uganda_ME.75.R")
library(qwraps2)
library(dplyr)
library(rlang)
library(xtable)
library(PropCIs)
library(DescTools)
# set working directory to location of the results datasets
setwd("C:/Users/Barny/Documents/GitHub/Pooled_Testing_HIV/Results/UgandaResults/round2")
# reading in results from methods except HyPred
uganda_ME0 <- read.table("Uganda_ME0.R")
uganda_ME.05 <- read.table("Uganda_ME.05.R")
uganda_ME.12 <- read.table("Uganda_ME.12.R")
uganda_ME.25 <- read.table("Uganda_ME.25.R")
uganda_ME.5 <- read.table("Uganda_ME.5.R")
uganda_ME.75 <- read.table("Uganda_ME.75.R")
### reforming the data frame into long format with the method name as a variable
reform <- function(df_name){
temp <- df_name
linreg <- temp[,c(1:6)]
linreg <- linreg %>%
rename(
tsens = linreg_tsens,
esense = linreg_esens,
t = linreg_t,
rds = linreg_rds,
tprevfail = linreg_tprevfail,
eprevfail = linreg_eprevfail
)
linreg$eff <- (100 - linreg$t)/100
linreg$method <- "linreg"
mss <- temp[,c(7:12)]
mss <- mss %>%
rename(
tsens = mss_tsens,
esense = mss_esens,
t = mss_t,
rds = mss_rds,
tprevfail = mss_tprevfail,
eprevfail = mss_eprevfail
)
mss$eff <- (100 - mss$t)/100
mss$method <- "mss"
lrsoe <- temp[,c(13:18)]
lrsoe <- lrsoe %>%
rename(
tsens = lrsoe_tsens,
esense = lrsoe_esens,
t = lrsoe_t,
rds = lrsoe_rds,
tprevfail = lrsoe_tprevfail,
eprevfail = lrsoe_eprevfail
)
lrsoe$eff <- (100 - lrsoe$t)/100
lrsoe$method <- "lrsoe"
mincov <- temp[,c(19:24)]
mincov <- mincov %>%
rename(
tsens = mincov_tsens,
esense = mincov_esens,
t = mincov_t,
rds = mincov_rds,
tprevfail = mincov_tprevfail,
eprevfail = mincov_eprevfail
)
mincov$eff <- (100 - mincov$t)/100
mincov$method <- "mincov"
mini <- temp[,c(25:30)]
mini <- mini %>%
rename(
tsens = mini_tsens,
esense = mini_esens,
t = mini_t,
rds = mini_rds,
tprevfail = mini_tprevfail,
eprevfail = mini_eprevfail
)
mini$eff <- (100 - mini$t)/100
mini$method <- "mini"
temp2 <- rbind(linreg, mss, lrsoe, mincov, mini)
for (i in 1:length(temp2$esense)){
if (is.na(temp2$esense[i])){
temp2$esense[i]=1
}
}
return(temp2)
}
# creates 95% CIs for performance measures
binCI <- function(dataset, pool_method, matsize=10, ci_method="clopper-pearson"){
temp <- reform(dataset)
temp <- temp[which(temp$method==pool_method),]
sens <- data.frame(BinomCI(sum(temp$esense*temp$eprevfail, na.rm=TRUE),
sum(temp$eprevfail),
conf.level=0.95,
method=ci_method))
sens.est <- paste0(round(sens$est*100, digits=1), c("%"))
sens.LCL <- paste0(c("("), round(sens$lwr.ci*100, digits=1), c("%"), c(","))
sens.UCL <- paste0(round(sens$upr.ci*100, digits=1), c("%"), c(")"))
sens.summ <- paste(sens.est, sens.LCL, sens.UCL, sep=" ", collapse=NULL)
eff <- data.frame(BinomCI(sum(temp$eff*(matsize^2), na.rm=TRUE),
length(temp$t)*(matsize^2),
conf.level=0.95,
method=ci_method))
eff.est <- paste0(round(eff$est*100, digits=1), c("%"))
eff.LCL <- paste0(c("("), round(eff$lwr.ci*100, digits=1), c("%"), c(","))
eff.UCL <- paste0(round(eff$upr.ci*100, digits=1), c("%"), c(")"))
eff.summ <- paste(eff.est, eff.LCL, eff.UCL, sep=" ", collapse=NULL)
eff.quant <- quantile(temp$eff)
Q1 <- paste0(c("("), round(eff.quant[2]*100, digits=1), c("%"), c(","))
Q3 <- paste0(round(eff.quant[4]*100, digits=1), c("%"), c(")"))
med <- paste0(round(eff.quant[3]*100, digits=1), c("%"))
eff.quant.summ <- paste(med, Q1, Q3, sep=" ", collapse=NULL)
min <- paste0(min(temp$eff)*100, c("%"), c(","))
max <- paste0(max(temp$eff)*100, c("%"))
eff.min <- paste(min, max, sep=" ", collapse=NULL)
rds.mean <- mean(temp$rds)
rds.stdev <- sd(temp$rds)
rds.n = length(temp$rds)
error <- qt(0.975,df=rds.n-1)*rds.stdev/sqrt(rds.n)
UL <- rds.mean+error
LL <- rds.mean-error
rds.summ <- paste0(round(rds.mean, digits=1), c(" ("),
round(LL, digits=1), c(", "), round(UL, digits=1), c(")"))
rds.quant <- quantile(temp$rds)
rds.Q1 <- paste0(c("("),rds.quant[2],c(","))
rds.med <- rds.quant[3]
rds.Q3 <- paste0(rds.quant[4], c(")"))
rds.summ.quant <- paste(rds.med, rds.Q1, rds.Q3, sep=" ", collapse=NULL)
rds.min <- paste(min(temp$rds), max(temp$rds), sep=", ", collapse=NULL)
temp_blank <- matrix(nrow=1,ncol=1)
summ <- data.frame(rbind(temp_blank, sens.summ, temp_blank, eff.summ, eff.quant.summ, eff.min,
temp_blank, rds.summ, rds.summ.quant, rds.min))
if (pool_method=="linreg"){names(summ)[1] <- "Linreg"}
if (pool_method=="mss"){names(summ)[1] <- "MSS"}
if (pool_method=="lrsoe"){names(summ)[1] <- "LRSOE"}
if (pool_method=="mincov"){names(summ)[1] <- "MiniCov"}
if (pool_method=="mini"){names(summ)[1] <- "Mini"}
return(summ)
}
large <- function(x){
paste0('{\\Large ', x, '}')
}
bold <- function(x){
paste0('{\\bfseries ', x, '}')
}
italic <- function(x){
paste0('{\\emph{ ', x, '}}')
}
final_table <- function(dataset, caption, matsize=10, ci_method="clopper-pearson"){
temp <- dataset
linreg <- binCI(dataset=temp, pool_method="linreg")
mss <- binCI(dataset=temp, pool_method="mss")
lrsoe <- binCI(dataset=temp, pool_method="lrsoe")
mincov <- binCI(dataset=temp, pool_method="mincov")
mini <- binCI(dataset=temp, pool_method="mini")
labels <- NULL
labels[1] <- ""
labels[2] <- "Mean (95% CI)"
labels[3] <- ""
labels[4] <- "Mean (95% CI)"
labels[5] <- "Median (Q1, Q3)"
labels[6] <- "Min, Max"
labels[7] <- ""
labels[8] <- "Mean (95% CI)"
labels[9] <- "Median (Q1, Q3)"
labels[10] <- "Min, Max"
label1 <- NULL
label1[1] <- "Sensitivity"
label1[2] <- ""
label1[3] <- "Efficiency"
label1[4] <- ""
label1[5] <- ""
label1[6] <- ""
label1[7] <- "Rounds"
label1[8] <- ""
label1[9] <- ""
label1[10] <- ""
result <- data.frame(cbind(label1, labels, linreg, mss, lrsoe, mincov, mini))
names(result)[1] <- ""
names(result)[2] <- ""
final <- xtable(result, include.rownames=FALSE, caption=caption)
align(final) <- "rrr|c|c|c|c|c"
return(print(final, include.rownames=FALSE, sanitize.colnames.function = bold,
caption.placement="top"))
}
final_table(dataset=uganda_ME0,
caption="Uganda results: ME=0")
final_table(dataset=uganda_ME.05,
caption="Uganda results: ME=0.05")
final_table(dataset=uganda_ME.12,
caption="Uganda results: ME=0.12")
final_table(dataset=uganda_ME.25,
caption="Uganda results: ME=0.25")
final_table(dataset=uganda_ME.5,
caption="Uganda results: ME=0.5")
final_table(dataset=uganda_ME.75,
caption="Uganda results: ME=0.75")
#==============================================================================
# FILENAME: results_anal_hypred.R
# PROJECT: 	Pooled testing in HIV
# PURPOSE: Creates LaTeX code for summary result tables for the HyPred method
# AUTHOR: Adam Brand
# INPUT datasets: the results datasets in the 'Results' folder
# R VERSION: 3.6.1
#==============================================================================
#Notes: this program is different from results_anal in that it creates separate tables for the
#       middle and bottom risk tier groups. Then in the last step this program combines results
#       from all 3 risk tier groups (depending on which method you use for the middle and bottom tier)
#       and outputs the mean of the 3 performance indicators. This is what is reported in tables 1-3
#       for the HyPred method.
# =============================================================================
library(qwraps2)
library(dplyr)
library(rlang)
library(xtable)
library(PropCIs)
library(DescTools)
# set working directory to location of uganda results
setwd("C:/Users/Barny/Documents/GitHub/Pooled_Testing_HIV/Results/UgandaResults")
hypred_uganda_ME0 <- read.table("Uganda_hypred_ME0.R")
hypred_uganda_ME.05 <- read.table("Uganda_hypred_ME.05.R")
hypred_uganda_ME.12 <- read.table("Uganda_hypred_ME.12.R")
hypred_uganda_ME.25 <- read.table("Uganda_hypred_ME.25.R")
hypred_uganda_ME.5 <- read.table("Uganda_hypred_ME.5.R")
hypred_uganda_ME.75 <- read.table("Uganda_hypred_ME.75.R")
### reforming the data frame into long format with the method name as a variable
reform <- function(df_name){
temp <- df_name
linreg <- temp[,c(1:6)]
linreg <- linreg %>%
rename(
tsens = linreg_tsens,
esense = linreg_esens,
t = linreg_t,
rds = linreg_rds,
tprevfail = linreg_tprevfail,
eprevfail = linreg_eprevfail
)
linreg$eff <- (100 - linreg$t)/100
linreg$method <- "linreg"
mss <- temp[,c(7:12)]
mss <- mss %>%
rename(
tsens = mss_tsens,
esense = mss_esens,
t = mss_t,
rds = mss_rds,
tprevfail = mss_tprevfail,
eprevfail = mss_eprevfail
)
mss$eff <- (100 - mss$t)/100
mss$method <- "mss"
lrsoe <- temp[,c(13:18)]
lrsoe <- lrsoe %>%
rename(
tsens = lrsoe_tsens,
esense = lrsoe_esens,
t = lrsoe_t,
rds = lrsoe_rds,
tprevfail = lrsoe_tprevfail,
eprevfail = lrsoe_eprevfail
)
lrsoe$eff <- (100 - lrsoe$t)/100
lrsoe$method <- "lrsoe"
mincov <- temp[,c(19:24)]
mincov <- mincov %>%
rename(
tsens = mincov_tsens,
esense = mincov_esens,
t = mincov_t,
rds = mincov_rds,
tprevfail = mincov_tprevfail,
eprevfail = mincov_eprevfail
)
mincov$eff <- (100 - mincov$t)/100
mincov$method <- "mincov"
mini <- temp[,c(25:30)]
mini <- mini %>%
rename(
tsens = mini_tsens,
esense = mini_esens,
t = mini_t,
rds = mini_rds,
tprevfail = mini_tprevfail,
eprevfail = mini_eprevfail
)
mini$eff <- (100 - mini$t)/100
mini$method <- "mini"
temp2 <- rbind(linreg, mss, lrsoe, mincov, mini)
for (i in 1:length(temp2$esense)){
if (is.na(temp2$esense[i])){
temp2$esense[i]=1
}
}
return(temp2)
}
# computing 95% CIs for the 3 performance criteria
binCI <- function(dataset, pool_method, matsize=10, ci_method="clopper-pearson"){
temp <- reform(dataset)
temp <- temp[which(temp$method==pool_method),]
sens <- data.frame(BinomCI(sum(temp$esense*temp$eprevfail, na.rm=TRUE),
sum(temp$eprevfail),
conf.level=0.95,
method=ci_method))
sens.est <- paste0(round(sens$est*100, digits=1), c("%"))
sens.LCL <- paste0(c("("), round(sens$lwr.ci*100, digits=1), c("%"), c(","))
sens.UCL <- paste0(round(sens$upr.ci*100, digits=1), c("%"), c(")"))
sens.summ <- paste(sens.est, sens.LCL, sens.UCL, sep=" ", collapse=NULL)
eff <- data.frame(BinomCI(sum(temp$eff*(matsize^2), na.rm=TRUE),
length(temp$t)*(matsize^2),
conf.level=0.95,
method=ci_method))
eff.est <- paste0(round(eff$est*100, digits=1), c("%"))
eff.LCL <- paste0(c("("), round(eff$lwr.ci*100, digits=1), c("%"), c(","))
eff.UCL <- paste0(round(eff$upr.ci*100, digits=1), c("%"), c(")"))
eff.summ <- paste(eff.est, eff.LCL, eff.UCL, sep=" ", collapse=NULL)
eff.quant <- quantile(temp$eff)
Q1 <- paste0(c("("), round(eff.quant[2]*100, digits=1), c("%"), c(","))
Q3 <- paste0(round(eff.quant[4]*100, digits=1), c("%"), c(")"))
med <- paste0(round(eff.quant[3]*100, digits=1), c("%"))
eff.quant.summ <- paste(med, Q1, Q3, sep=" ", collapse=NULL)
min <- paste0(min(temp$eff)*100, c("%"), c(","))
max <- paste0(max(temp$eff)*100, c("%"))
eff.min <- paste(min, max, sep=" ", collapse=NULL)
rds.mean <- mean(temp$rds)
rds.stdev <- sd(temp$rds)
rds.n = length(temp$rds)
error <- qt(0.975,df=rds.n-1)*rds.stdev/sqrt(rds.n)
UL <- rds.mean+error
LL <- rds.mean-error
rds.summ <- paste0(round(rds.mean, digits=1), c(" ("),
round(LL, digits=1), c(", "), round(UL, digits=1), c(")"))
rds.quant <- quantile(temp$rds)
rds.Q1 <- paste0(c("("),rds.quant[2],c(","))
rds.med <- rds.quant[3]
rds.Q3 <- paste0(rds.quant[4], c(")"))
rds.summ.quant <- paste(rds.med, rds.Q1, rds.Q3, sep=" ", collapse=NULL)
rds.min <- paste(min(temp$rds), max(temp$rds), sep=", ", collapse=NULL)
temp_blank <- matrix(nrow=1,ncol=1)
summ <- data.frame(rbind(temp_blank, sens.summ, temp_blank, eff.summ, eff.quant.summ, eff.min,
temp_blank, rds.summ, rds.summ.quant, rds.min))
if (pool_method=="linreg"){names(summ)[1] <- "Linreg"}
if (pool_method=="mss"){names(summ)[1] <- "MSS"}
if (pool_method=="lrsoe"){names(summ)[1] <- "LRSOE"}
if (pool_method=="mincov"){names(summ)[1] <- "MiniPred"}
if (pool_method=="mini"){names(summ)[1] <- "Mini+alg"}
return(summ)
}
large <- function(x){
paste0('{\\Large ', x, '}')
}
bold <- function(x){
paste0('{\\bfseries ', x, '}')
}
italic <- function(x){
paste0('{\\emph{ ', x, '}}')
}
# creates results tables for each of the 3 tiers of risk groups separately for each method within the tier
final_table <- function(dataset, caption, matsize=10, ci_method="clopper-pearson"){
temp <- dataset
linreg <- binCI(dataset=temp, pool_method="linreg")
mss <- binCI(dataset=temp, pool_method="mss")
lrsoe <- binCI(dataset=temp, pool_method="lrsoe")
mincov <- binCI(dataset=temp, pool_method="mincov")
mini <- binCI(dataset=temp, pool_method="mini")
labels <- NULL
labels[1] <- ""
labels[2] <- "Mean (95% CI)"
labels[3] <- ""
labels[4] <- "Mean (95% CI)"
labels[5] <- "Median (Q1, Q3)"
labels[6] <- "Min, Max"
labels[7] <- ""
labels[8] <- "Mean (95% CI)"
labels[9] <- "Median (Q1, Q3)"
labels[10] <- "Min, Max"
label1 <- NULL
label1[1] <- "Sensitivity"
label1[2] <- ""
label1[3] <- "Efficiency"
label1[4] <- ""
label1[5] <- ""
label1[6] <- ""
label1[7] <- "Rounds"
label1[8] <- ""
label1[9] <- ""
label1[10] <- ""
result <- data.frame(cbind(label1, labels, linreg, mss, lrsoe, mincov, mini))
names(result)[1] <- ""
names(result)[2] <- ""
final <- xtable(result, include.rownames=FALSE, caption=caption)
align(final) <- "rrr|c|c|c|c|c"
return(print(final, include.rownames=FALSE, sanitize.colnames.function = bold,
caption.placement="top"))
}
final_table(dataset=hypred_uganda_ME0[hypred_uganda_ME0$section=="mid",],
caption="Uganda results - Hypred mid tier: ME=0")
final_table(dataset=hypred_uganda_ME.05[hypred_uganda_ME.05$section=="mid",],
caption="Uganda results - Hypred mid tier: ME=0.05")
final_table(dataset=hypred_uganda_ME.12[hypred_uganda_ME.12$section=="mid",],
caption="Uganda results - Hypred mid tier: ME=0.12")
final_table(dataset=hypred_uganda_ME.25[hypred_uganda_ME.25$section=="mid",],
caption="Uganda results - Hypred mid tier: ME=0.25")
final_table(dataset=hypred_uganda_ME.5[hypred_uganda_ME.5$section=="mid",],
caption="Uganda results - Hypred mid tier: ME=0.5")
final_table(dataset=hypred_uganda_ME.75[hypred_uganda_ME.75$section=="mid",],
caption="Uganda results - Hypred mid tier: ME=0.75")
final_table(dataset=hypred_uganda_ME0[hypred_uganda_ME0$section=="low",],
caption="Uganda results - Hypred low tier: ME=0")
final_table(dataset=hypred_uganda_ME.05[hypred_uganda_ME.05$section=="low",],
caption="Uganda results - Hypred low tier: ME=0.05")
final_table(dataset=hypred_uganda_ME.12[hypred_uganda_ME.12$section=="low",],
caption="Uganda results - Hypred low tier: ME=0.12")
final_table(dataset=hypred_uganda_ME.25[hypred_uganda_ME.25$section=="low",],
caption="Uganda results - Hypred low tier: ME=0.25")
final_table(dataset=hypred_uganda_ME.5[hypred_uganda_ME.5$section=="low",],
caption="Uganda results - Hypred low tier: ME=0.5")
final_table(dataset=hypred_uganda_ME.75[hypred_uganda_ME.75$section=="low",],
caption="Uganda results - Hypred low tier: ME=0.75")
