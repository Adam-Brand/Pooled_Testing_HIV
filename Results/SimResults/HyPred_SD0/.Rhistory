data1 <- cbind(vl, time)
data.naive <- rbind(data.naive, data1)
}
prev.est.naive <- c(.01,.03,.05,.07,.08,.11,.11,.14,.17,.19,.20, .22)
data.naive <- matrix(nrow=0, ncol=2)
for(i in 1:length(prev.est.naive)){
vl <- createpop(1000, prev.est.naive[i], 1000, prevfail=TRUE)
time <- rep(t[i], times=1000)
data1 <- cbind(vl, time)
data.naive <- rbind(data.naive, data1)
}
View(data.naive)
check <- data.naive[1:1000,]
high <- check$vl
length(high[high>1000])
check <- data.naive[1:1000,]
high <- check
length(high[high>1000])
data.naive <- data.frame(data.naive)
View(data.naive)
data.naive$logvl <- log(data.naive$vl, base=10)
View(data.naive)
fit.naive <- glm(data.naive$logvl~data.naive$time)
summary(fit.naive)
prev.est.naive <- c(.01,.02,.05,.07,.08,.11,.11,.14,.17,.19,.20, .22)
data.naive <- matrix(nrow=0, ncol=2)
for(i in 1:length(prev.est.naive)){
vl <- createpop(1000, prev.est.naive[i], 1000, prevfail=TRUE)
time <- rep(t[i], times=1000)
data1 <- cbind(vl, time)
data.naive <- rbind(data.naive, data1)
}
data.naive <- data.frame(data.naive)
data.naive$logvl <- log(data.naive$vl, base=10)
check <- data.naive[1:1000,]
high <- check
length(high[high>1000])
fit.naive <- glm(data.naive$logvl~data.naive$time)
summary(fit.naive)
data$logtime <- log(time, base=2)
View(data)
log(1)
log(1, base=2)
data$logtime <- log(data$time, base=2)
View(data)
fit <- glm(data$logvl~data$logtime)
summary(fit)
plot(fit)
plot(predict(fit))
summary(fit)
logvl <- seq(1, 6, by=.01)
log(19, base=2)
logtime <- seq(0, 4.3, by=.1)
logtime <- seq(0, 4.3, by=.1)
logvl <- NULL
for(i in 1:length(logvl)){
logvl[i] <- 1.21 + .3344*logtime
}
logtime <- seq(0, 4.3, by=.1)
logvl <- NULL
for(i in 1:length(logvl)){
logvl[i] <- 1.21 + .3344*logtime[i]
}
plot(logvl~logtime)
logvl <- NULL
for(i in 1:length(logtime)){
logvl[i] <- 1.21 + .3344*logtime[i]
}
plot(logvl~logtime)
time <- 2^logtime
plot(logvl~time)
t <- c(1,2,3,4,5,6,7,8,9,10,11,12,19)
t2 <- t^2
t3 <- t^3
prev <- c(.01, .03, .07,.12,.18,.24,.27,.30,.32,.35,.37,.38,.50)
prev.est <- data.frame(cbind(t, prev))
data <- matrix(nrow=0, ncol=2)
for(i in 1:length(t)){
vl <- createpop(1000, prev[i], 1000, prevfail=TRUE)
time <- rep(t[i], times=1000)
data1 <- cbind(vl, time)
data <- rbind(data, data1)
}
data <- data.frame(data)
data$logtime <- log(data$time, base=2)
data$logvl <- log(data$vl, base=10)
check <- data[1:1000,]
high <- check$vl
length(high[high>1000])
plot(data$logvl~data$time)
fit <- glm(data$logvl~data$logtime)
summary(fit)
logtime <- seq(0, 7, by=.1)
logvl <- NULL
for(i in 1:length(logtime)){
logvl[i] <- 1.21 + .337*logtime[i]
}
time <- 2^logtime
plot(logvl~time)
data <- data.frame(data)
data$logtime <- log(data$time, base=1.5)
data$logvl <- log(data$vl, base=10)
check <- data[1:1000,]
high <- check$vl
length(high[high>1000])
plot(data$logvl~data$time)
fit <- glm(data$logvl~data$logtime)
summary(fit)
logtime <- seq(0, 7, by=.1)
logvl <- NULL
for(i in 1:length(logtime)){
logvl[i] <- 1.21 + .197*logtime[i]
}
time <- 1.5^logtime
plot(logvl~time)
data <- data.frame(data)
data$logtime <- log(data$time)
data$logvl <- log(data$vl, base=10)
check <- data[1:1000,]
high <- check$vl
length(high[high>1000])
plot(data$logvl~data$time)
fit <- glm(data$logvl~data$logtime)
summary(fit)
logtime <- seq(0, 7, by=.1)
logvl <- NULL
for(i in 1:length(logtime)){
logvl[i] <- 1.21 + .4863*logtime[i]
}
time <- exp(logtime)
plot(logvl~time)
plot(logvl~time, xlim=(0, 100))
logtime <- seq(0, 4.3, by=.1)
logvl <- NULL
for(i in 1:length(logtime)){
logvl[i] <- 1.21 + .4863*logtime[i]
}
time <- exp(logtime)
plot(logvl~time)
fit <- glm(data$logvl~data$logtime)
summary(fit)
logtime <- seq(0, 4.3, by=.1)
logvl <- NULL
for(i in 1:length(logtime)){
logvl[i] <- 1.21 + .4863*logtime[i]
}
time <- exp(logtime)
plot(logvl~time)
plot(logvl~time, main="Log10(VL) vs. Log(Time in Months from Suppression",
xlab="Time in Months", ylab="Log10(VL")
plot(logvl~time, main="Log10(VL) vs. Log2(Time in Months from Suppression)
Combined Population",
xlab="Time in Months", ylab="Log10(VL")
data$logtime <- log(data$time, base=2)
data$logvl <- log(data$vl, base=10)
check <- data[1:1000,]
high <- check$vl
length(high[high>1000])
plot(data$logvl~data$time)
fit <- glm(data$logvl~data$logtime)
summary(fit)
plot(logvl~time, main="Log10(VL) vs. Log2(Time in Months from Suppression)
Combined Population",
xlab="Time in Months", ylab="Log10(VL)")
prev.est.naive <- c(.01,.02,.05,.07,.08,.11,.11,.14,.17,.19,.20, .22)
data.naive <- matrix(nrow=0, ncol=2)
for(i in 1:length(prev.est.naive)){
vl <- createpop(1000, prev.est.naive[i], 1000, prevfail=TRUE)
time <- rep(t[i], times=1000)
data1 <- cbind(vl, time)
data.naive <- rbind(data.naive, data1)
}
data.naive <- data.frame(data.naive)
data.naive$logtime <- log(data.naive$time, base=2)
data.naive$logvl <- log(data.naive$vl, base=10)
check <- data.naive[1:1000,]
high <- check
length(high[high>1000])
fit.naive <- glm(data.naive$logvl~data.naive$logtime)
summary(fit.naive)
fit <- glm(data$logvl~data$logtime)
summary(fit)
logtime <- seq(0, 4.3, by=.1)
logvl <- NULL
for(i in 1:length(logtime)){
logvl[i] <- 1.2063 + .3370*logtime[i]
}
time <- 2^logtime
plot(logvl~time, main="Log10(VL) vs. Log2(Time in Months from Suppression)
Combined Population",
xlab="Time in Months", ylab="Log10(VL)")
2^4.3
log(100, base=2)
logtime <- seq(0, 7, by=.1)
logvl <- NULL
for(i in 1:length(logtime)){
logvl[i] <- 1.2063 + .3370*logtime[i]
}
time <- 2^logtime
plot(logvl~time, main="Log10(VL) vs. Log2(Time in Months from Suppression)
Combined Population",
xlab="Time in Months", ylab="Log10(VL)")
10^3.5
data$sqrtime <- data$time^(1/2)
fit2 <- glm(data$logvl~data$sqrtime)
summary(fit2)
sqrtime <- seq(0, 10, by=.1)
logvl <- NULL
for(i in 1:length(sqrtime)){
logvl[i] <- 0.9343 + .4370*sqrtime[i]
}
time <- sqrtime^2
plot(logvl~time, main="Log10(VL) vs. Square Root Time in Months from Suppression)
Combined Population",
xlab="Time in Months", ylab="Log10(VL)")
plot(logvl~time, main="Log10(VL) vs. Log2(Time in Months from Suppression)
Combined Population",
xlab="Time in Months", ylab="Log10(VL)")
time <- 2^logtime
plot(logvl~time, main="Log10(VL) vs. Log2(Time in Months from Suppression)
Combined Population",
xlab="Time in Months", ylab="Log10(VL)")
logtime <- seq(0, 7, by=.1)
logvl <- NULL
for(i in 1:length(logtime)){
logvl[i] <- 1.2063 + .3370*logtime[i]
}
time <- 2^logtime
plot(logvl~time, main="Log10(VL) vs. Log2(Time in Months from Suppression)
Combined Population",
xlab="Time in Months", ylab="Log10(VL)")
data.naive <- data.frame(data.naive)
data.naive$logtime <- log(data.naive$time, base=2)
data.anive$sqrtime <- data.naive$time^(1/2)
data.naive$logvl <- log(data.naive$vl, base=10)
check <- data.naive[1:1000,]
high <- check
length(high[high>1000])
fit.naive <- glm(data.naive$logvl~data.naive$sqrtime)
summary(fit.naive)
logtime <- seq(0, 4.3, by=.1)
logvl <- NULL
for(i in 1:length(logtime)){
logvl[i] <- 1.3241 + .1654*sqrtime[i]
}
time <- sqrtime^2
plot(logvl~time, main="Log10(VL) vs. Sqrt(Time in Months)
Naive Population",
xlab="Time in Months", ylab="Log10(VL)")
sqrtime <- seq(0, 10, by=.1)
logvl <- NULL
for(i in 1:length(logtime)){
logvl[i] <- 1.3241 + .1654*sqrtime[i]
}
time <- sqrtime^2
plot(logvl~time, main="Log10(VL) vs. Sqrt(Time in Months)
Naive Population",
xlab="Time in Months", ylab="Log10(VL)")
sqrtime <- seq(0, 10, by=.1)
logvl <- NULL
for(i in 1:length(sqrtime)){
logvl[i] <- 1.3241 + .1654*sqrtime[i]
}
time <- sqrtime^2
plot(logvl~time, main="Log10(VL) vs. Sqrt(Time in Months)
Naive Population",
xlab="Time in Months", ylab="Log10(VL)")
10^0.5
prev.est.exp <- c(.01,.03,.08,.15,.20,.26,.30,.34,.36,.39,.40,.42)
prev.est.exp <- c(.01,.03,.08,.15,.20,.26,.30,.34,.36,.39,.40,.42)
?glm()
install.packages("knitr")
install.packages("rmarkdown")
install.packages("rmarkdown")
library("rmarkdown", lib.loc="~/R/win-library/3.1")
library("knitr", lib.loc="~/R/win-library/3.1")
updateR()
updateR()
if(!require(installr)) {
install.packages("installr");
require(installr)
} #load / install+load installr
updateR()
library(qwraps2)
library(dplyr)
library(rlang)
library(xtable)
library(PropCIs)
library(DescTools)
setwd("C:/Users/Barny/Dropbox/KI_Project_4/Results/2nd round/HyPred_SD1.0")
hypred_AGAIG_ME.05 <- read.table("Results_Hypred_AGAIG_ME.05_rand.R")
hypred_AGAIG_ME.12 <- read.table("Results_Hypred_AGAIG_ME.12_rand.R")
hypred_AGAIG_ME.25 <- read.table("Results_Hypred_AGAIG_ME.25_rand.R")
hypred_AGAIG_ME.5 <- read.table("Results_Hypred_AGAIG_ME.5_rand.R")
##############################
setwd("C:/Users/Barny/Dropbox/KI_Project_4/Results/2nd round/HyPred_SD0")
hypred_AGAIG_SD0_ME0 <- read.table("Results_Hypred_AGAIG_ME0_rand.R")
hypred_AGAIG_SD0_ME.25 <- read.table("Results_Hypred_AGAIG_ME.25_rand.R")
hypred_AGAIG_SD0_ME.5 <- read.table("Results_Hypred_AGAIG_ME.5_rand.R")
hypred_AGAIG_SD0_ME.75 <- read.table("Results_Hypred_AGAIG_ME.75_rand.R")
### reforming the data frame into long format with the method name as a variable
reform <- function(df_name){
temp <- df_name
linreg <- temp[,c(1:6)]
linreg <- linreg %>%
rename(
tsens = linreg_tsens,
esense = linreg_esens,
t = linreg_t,
rds = linreg_rds,
tprevfail = linreg_tprevfail,
eprevfail = linreg_eprevfail
)
linreg$eff <- (100 - linreg$t)/100
linreg$method <- "linreg"
mss <- temp[,c(7:12)]
mss <- mss %>%
rename(
tsens = mss_tsens,
esense = mss_esens,
t = mss_t,
rds = mss_rds,
tprevfail = mss_tprevfail,
eprevfail = mss_eprevfail
)
mss$eff <- (100 - mss$t)/100
mss$method <- "mss"
lrsoe <- temp[,c(13:18)]
lrsoe <- lrsoe %>%
rename(
tsens = lrsoe_tsens,
esense = lrsoe_esens,
t = lrsoe_t,
rds = lrsoe_rds,
tprevfail = lrsoe_tprevfail,
eprevfail = lrsoe_eprevfail
)
lrsoe$eff <- (100 - lrsoe$t)/100
lrsoe$method <- "lrsoe"
mincov <- temp[,c(19:24)]
mincov <- mincov %>%
rename(
tsens = mincov_tsens,
esense = mincov_esens,
t = mincov_t,
rds = mincov_rds,
tprevfail = mincov_tprevfail,
eprevfail = mincov_eprevfail
)
mincov$eff <- (100 - mincov$t)/100
mincov$method <- "mincov"
mini <- temp[,c(25:30)]
mini <- mini %>%
rename(
tsens = mini_tsens,
esense = mini_esens,
t = mini_t,
rds = mini_rds,
tprevfail = mini_tprevfail,
eprevfail = mini_eprevfail
)
mini$eff <- (100 - mini$t)/100
mini$method <- "mini"
temp2 <- rbind(linreg, mss, lrsoe, mincov, mini)
for (i in 1:length(temp2$esense)){
if (is.na(temp2$esense[i])){
temp2$esense[i]=1
}
}
return(temp2)
}
binCI <- function(dataset, pool_method, matsize=10, ci_method="clopper-pearson"){
temp <- reform(dataset)
temp <- temp[which(temp$method==pool_method),]
sens <- data.frame(BinomCI(sum(temp$esense*temp$eprevfail, na.rm=TRUE),
sum(temp$eprevfail),
conf.level=0.95,
method=ci_method))
sens.est <- paste0(round(sens$est*100, digits=1), c("%"))
sens.LCL <- paste0(c("("), round(sens$lwr.ci*100, digits=1), c("%"), c(","))
sens.UCL <- paste0(round(sens$upr.ci*100, digits=1), c("%"), c(")"))
sens.summ <- paste(sens.est, sens.LCL, sens.UCL, sep=" ", collapse=NULL)
eff <- data.frame(BinomCI(sum(temp$eff*(matsize^2), na.rm=TRUE),
length(temp$t)*(matsize^2),
conf.level=0.95,
method=ci_method))
eff.est <- paste0(round(eff$est*100, digits=1), c("%"))
eff.LCL <- paste0(c("("), round(eff$lwr.ci*100, digits=1), c("%"), c(","))
eff.UCL <- paste0(round(eff$upr.ci*100, digits=1), c("%"), c(")"))
eff.summ <- paste(eff.est, eff.LCL, eff.UCL, sep=" ", collapse=NULL)
eff.quant <- quantile(temp$eff)
Q1 <- paste0(c("("), round(eff.quant[2]*100, digits=1), c("%"), c(","))
Q3 <- paste0(round(eff.quant[4]*100, digits=1), c("%"), c(")"))
med <- paste0(round(eff.quant[3]*100, digits=1), c("%"))
eff.quant.summ <- paste(med, Q1, Q3, sep=" ", collapse=NULL)
min <- paste0(min(temp$eff)*100, c("%"), c(","))
max <- paste0(max(temp$eff)*100, c("%"))
eff.min <- paste(min, max, sep=" ", collapse=NULL)
rds.mean <- mean(temp$rds)
rds.stdev <- sd(temp$rds)
rds.n = length(temp$rds)
error <- qt(0.975,df=rds.n-1)*rds.stdev/sqrt(rds.n)
UL <- rds.mean+error
LL <- rds.mean-error
rds.summ <- paste0(round(rds.mean, digits=1), c(" ("),
round(LL, digits=1), c(", "), round(UL, digits=1), c(")"))
rds.quant <- quantile(temp$rds)
rds.Q1 <- paste0(c("("),rds.quant[2],c(","))
rds.med <- rds.quant[3]
rds.Q3 <- paste0(rds.quant[4], c(")"))
rds.summ.quant <- paste(rds.med, rds.Q1, rds.Q3, sep=" ", collapse=NULL)
rds.min <- paste(min(temp$rds), max(temp$rds), sep=", ", collapse=NULL)
temp_blank <- matrix(nrow=1,ncol=1)
summ <- data.frame(rbind(temp_blank, sens.summ, temp_blank, eff.summ, eff.quant.summ, eff.min,
temp_blank, rds.summ, rds.summ.quant, rds.min))
if (pool_method=="linreg"){names(summ)[1] <- "Linreg"}
if (pool_method=="mss"){names(summ)[1] <- "MSS"}
if (pool_method=="lrsoe"){names(summ)[1] <- "LRSOE"}
if (pool_method=="mincov"){names(summ)[1] <- "MiniCov"}
if (pool_method=="mini"){names(summ)[1] <- "Mini"}
return(summ)
}
large <- function(x){
paste0('{\\Large ', x, '}')
}
bold <- function(x){
paste0('{\\bfseries ', x, '}')
}
italic <- function(x){
paste0('{\\emph{ ', x, '}}')
}
final_table <- function(dataset, caption, matsize=10, ci_method="clopper-pearson"){
temp <- dataset
linreg <- binCI(dataset=temp, pool_method="linreg")
mss <- binCI(dataset=temp, pool_method="mss")
lrsoe <- binCI(dataset=temp, pool_method="lrsoe")
mincov <- binCI(dataset=temp, pool_method="mincov")
mini <- binCI(dataset=temp, pool_method="mini")
labels <- NULL
labels[1] <- ""
labels[2] <- "Mean (95% CI)"
labels[3] <- ""
labels[4] <- "Mean (95% CI)"
labels[5] <- "Median (Q1, Q3)"
labels[6] <- "Min, Max"
labels[7] <- ""
labels[8] <- "Mean (95% CI)"
labels[9] <- "Median (Q1, Q3)"
labels[10] <- "Min, Max"
label1 <- NULL
label1[1] <- "Sensitivity"
label1[2] <- ""
label1[3] <- "Efficiency"
label1[4] <- ""
label1[5] <- ""
label1[6] <- ""
label1[7] <- "Rounds"
label1[8] <- ""
label1[9] <- ""
label1[10] <- ""
result <- data.frame(cbind(label1, labels, linreg, mss, lrsoe, mincov, mini))
names(result)[1] <- ""
names(result)[2] <- ""
final <- xtable(result, include.rownames=FALSE, caption=caption)
align(final) <- "rrr|c|c|c|c|c"
return(print(final, include.rownames=FALSE, sanitize.colnames.function = bold,
caption.placement="top"))
}
final_table(dataset=hypred_reverse_SD0_ME0[hypred_reverse_SD0_ME0$section=="mid",],
caption = "Hypred Mid Tier, Reverse, SD=0 ME=0, est betas")
setwd("C:/Users/Barny/Dropbox/KI_Project_4/Results/2nd round/HyPred_SD1.0")
hypred_reverse_ME.05 <- read.table("Results_Hypred_reverse_ME.05_rand.R")
hypred_reverse_ME.12 <- read.table("Results_Hypred_reverse_ME.12_rand.R")
hypred_reverse_ME.25 <- read.table("Results_Hypred_reverse_ME.25_rand.R")
hypred_reverse_ME.5 <- read.table("Results_Hypred_reverse_ME.5_rand.R")
setwd("C:/Users/Barny/Dropbox/KI_Project_4/Results/2nd round/HyPred_SD0")
hypred_reverse_SD0_ME0 <- read.table("Results_Hypred_reverse_ME0_rand.R")
hypred_reverse_SD0_ME.25 <- read.table("Results_Hypred_reverse_ME.25_rand.R")
hypred_reverse_SD0_ME.5 <- read.table("Results_Hypred_reverse_ME.5_rand.R")
hypred_reverse_SD0_ME.75 <- read.table("Results_Hypred_reverse_ME.75_rand.R")
final_table(dataset=hypred_reverse_SD0_ME0[hypred_reverse_SD0_ME0$section=="mid",],
caption = "Hypred Mid Tier, Reverse, SD=0 ME=0, est betas")
final_table(dataset=hypred_reverse_SD0_ME.25[hypred_reverse_SD0_ME.25$section=="mid",],
caption = "Hypred Mid Tier, Reverse, SD=0 ME=0.25, est betas")
final_table(dataset=hypred_reverse_SD0_ME.5[hypred_reverse_SD0_ME.5$section=="mid",],
caption = "Hypred Mid Tier, Reverse, SD=0 ME=0.5, est betas")
final_table(dataset=hypred_reverse_SD0_ME.75[hypred_reverse_SD0_ME.75$section=="mid",],
caption = "Hypred Mid Tier, Reverse, SD=0 ME=0.75, est betas")
final_table(dataset=hypred_reverse_ME.05[hypred_reverse_ME.05$section=="mid",],
caption = "Hypred Mid Tier, Reverse, SD=1 ME=0.05, est betas")
final_table(dataset=hypred_reverse_ME.12[hypred_reverse_ME.12$section=="mid",],
caption = "Hypred Mid Tier, Reverse, SD=1 ME=0.12, est betas")
final_table(dataset=hypred_reverse_ME.25[hypred_reverse_ME.25$section=="mid",],
caption = "Hypred Mid Tier, Reverse, SD=1 ME=0.25, est betas")
final_table(dataset=hypred_reverse_ME.5[hypred_reverse_ME.5$section=="mid",],
caption = "Hypred Mid Tier, Reverse, SD=1 ME=0.5, est betas")
final_table(dataset=hypred_reverse_SD0_ME0[hypred_reverse_SD0_ME0$section=="low",],
caption = "Hypred low Tier, Reverse, SD=0 ME=0, est betas")
final_table(dataset=hypred_reverse_SD0_ME.25[hypred_reverse_SD0_ME.25$section=="low",],
caption = "Hypred low Tier, Reverse, SD=0 ME=0.25, est betas")
final_table(dataset=hypred_reverse_SD0_ME.5[hypred_reverse_SD0_ME.5$section=="low",],
caption = "Hypred low Tier, Reverse, SD=0 ME=0.5, est betas")
final_table(dataset=hypred_reverse_SD0_ME.75[hypred_reverse_SD0_ME.75$section=="low",],
caption = "Hypred low Tier, Reverse, SD=0 ME=0.75, est betas")
final_table(dataset=hypred_reverse_ME.05[hypred_reverse_ME.05$section=="low",],
caption = "Hypred low Tier, Reverse, SD=1 ME=0.05, est betas")
final_table(dataset=hypred_reverse_ME.12[hypred_reverse_ME.12$section=="low",],
caption = "Hypred low Tier, Reverse, SD=1 ME=0.12, est betas")
final_table(dataset=hypred_reverse_ME.25[hypred_reverse_ME.25$section=="low",],
caption = "Hypred low Tier, Reverse, SD=1 ME=0.25, est betas")
final_table(dataset=hypred_reverse_ME.5[hypred_reverse_ME.5$section=="low",],
caption = "Hypred low Tier, Reverse, SD=1 ME=0.5, est betas")
